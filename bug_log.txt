gyaradOS ECE 391 Bug Log

Checkpoint 1:
1. Date: 3/11/16:
   1. Problem: Multiple IRQs being enabled could not be handled, thus only one device could be enabled at once.
   2. Solution: Grab the current IRQ mask from the PIC and ‘AND’ the new IRQ to the current PIC Mask. The same had to be done for disabling a IRQ, but instead of ‘AND’ing, a ‘OR’ operation had to be done.
   3. Time to fix: 1.5 hours
   4. Tanishq
2. Date: 3/11/15:
   1. Problem: RTC would only generate one interrupt, even after the PIC EOI had be sent correctly.
   2. Solution: The RTC does not generate interrupts forever, instead the RTC register C must be read so that the RTC thinks that data was grabbed. This allows for the RTC to continue to generate interrupts. It must be noted that this “Special EOI” must be called for every RTC interrupt.
   3. Time to fix: 1 hour
   4. Tanishq
3. Date: 3/12/16:
   1. Problem: After receiving multiple interrupts of characters, the OS would get a General Protection Fault. However, single, slow, keystrokes did not cause any issues.
   2. Solution: Our IDT was not being set up with the correct vectors for the general interrupt case, and we missed a few exceptions, causing the table to be incorrect. We fixed those mistakes.
   3. Time to fix: 2 hours
   4. Rohan
4. Date: 3/13/16:
   1. Problem: After receiving multiple interrupts of characters, the OS would call “entry” again from kernel.c, and would cause “Invalid magic number: 0xFF” to be printed. Was especially tricky since everything worked fine until a few seconds after the multiple interrupts.
   2. Solution: Our error details that we were printing in the BSOD was causing the stack to become messed up, which made it pop all the way back to the entry function and execute it again. Removed the faulty debug lines.
   3. Time to fix: 3 hours
   4. Rohan
5. Date:3/11/16
   1. Problem: Enabling the paging caused kernel to crash
   2. Solution: Immediate values did not have the “$” symbol and arguments had to be flipped. 
   3. Time to fix: 2 hours 
   4. Steven/Harrison

Checkpoint 2: 
1. Date: 3/28/16
   1. Problem: The data being copied into the buffer for read_data was always zero
   2. Solution: Changed the b_block_addrs from a uint32_t pointer to a uint32_t
   3. Time to fix: 3 hours.
   4. Steven
2. Date: 3/27/16
   1. Problem: The boot block was setup incorrectly as only two file names were being read by the dentries.
   2. Solution: Changed the type for blocks_reserved from uint32_t to uint8_t
   3. Time to fix: 3 hours.
   4. Rohan
3. Date: 3/28/16
   1. Problem: We could read the names of the first few files with ls but after that it was screwed up
   2. Solution: Our struct’s member variable sizes were incorrect and didn’t have the correct sizes
   3. Time to fix: 4 hours.
   4. Harrison/Rohan

Checkpoint 3:
1. Date: 4/12/16
   1. Problem: Halt wouldn’t work because it was restoring the wrong data
   2. Solution: We were not keeping track of our PCBs correctly. Implement global variables to keep track of our PCBs and track them that way.
   3. Time to fix: 3 hours.
   4. Rohan/Tanishq
2. Date: 4/12/16
   1. Problem: After executing a function, our program would page fault at null… we thought execute was working?
   2. Solution: After some digging, it seemed that our file system was being almost deinitialized after running execute. Turns out it was coming from the terminal_write call that shell called, as in terminal_write, we set the keyboard buffer to null till a size bigger than the buffer (1024). Only loop till nbytes.
   3. Time to fix: 4 hours.
   4. All with the help of Vib

Checkpoint 4:
1. Date: 4/17/16
   1. Problem: The system calls in syserr had various page faults and errors
   2. Solution: Included and edited error checks in the read and write syscall.
   3. Time to fix: 1 hour
   4. All group members
2. Date: 4/15/16
   1. Problem: OS would stop opening programs after 6 runs
   2. Solution: Removed incorrect if statement in close syscall
   3. Time to fix: 30 minutes
   4. Steven
3. Date: 4/16/16
   1. Problem: Only fish would page fault once halt was called.
   2. Solution: memcpy was setting pcb to null, so we changed it to directly copy fish instead of memcpy-ing with a buffer
   3. Time to fix: 2 hours
   4. Rohan
4. Date:4/15/16
   1. Problem: Fish wouldn’t start
   2. Solution: Set the paging user_super bit for the video page so that it could properly write.
   3. Time to fix: 2 hours
   4. Rohan

Checkpoint 5:
1. Date: 4/30/16
   1. Problem: Page faults while running programs between multiple terminals
   2. Solution: Removed “leave” and “ret” instructions, which did not modify the stack anymore. In addition, we immediately spawn 3 terminals to fix any startup issues. Also, move all context switching to the PIT handler and not in the keyboard anymore.
   3. Time to fix: 2 days
   4. Rohan/Tanishq
2. Date: 4/29/16
   1. Problem: Context switch was not working.
   2. Solution: We were not setting the initial program’s place to jump back into it correctly (esp/ebp). Set it before we jump in the context switch to fix it.
   3. Time to fix: 2 hours
   4. Rohan
3. Date: 4/30/16
   1. Problem: Fish doesn’t show up for terminals 2 and 3 if screen hasn’t been scrolled
   2. Solution: Added a method to fix the attribute bit 
   3. Time to fix: 15 mins
   4. Rohan/Steven
4. Date: 5/1/16
   1. Problem: Page faults when switching terminals
   2. Solution: Moved all context switching to the pit.c to avoid any unnecessary stack switches
   3. Time to fix: 3 days
   4. Rohan
5. Date: 5/1/16
   1. Problem: Video memory would leak into the wrong terminals
   2. Solution: Map 4 separate pages for video memory. The first page is the physically displayed page while the other 3 are used for storage of information.
   3. Time to fix: 3 Hours
   4. Tanishq
6. Date: 4/28/16
   1. Problem: OS Triple faults on some context switches
   2. Solution: Set TSS.ESP0 using the process number instead of simply grabbing the ESP from the PCB, as it is not the same as the kernel stack
   3. Time to fix: 4 hours
   4. Tanishq
7. Date: 5/1/16
   1. Problem: Programs would crash, bringing down the entire system
   2. Solution: Implement user level exception handling by halting the offending program
   3. Time to fix: 15 minutes
   4. Rohan
8. Date 5/1/16
   1. Problem: Open program slots would not be handed out correctly
   2. Solution: Switch from using a AND operation to a more robust XOR operation
   3. Time to fix: 45 minutes
   4. Tanishq
